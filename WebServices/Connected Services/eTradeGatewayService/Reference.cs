//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebServices.eTradeGatewayService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://drax.power/", ConfigurationName="eTradeGatewayService.eTradeGatewaySoap")]
    public interface eTradeGatewaySoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetZAINETData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebServices.eTradeGatewayService.udtTabletTradeDetails GetZAINETData(string ZAINETNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetZAINETData", ReplyAction="*")]
        System.Threading.Tasks.Task<WebServices.eTradeGatewayService.udtTabletTradeDetails> GetZAINETDataAsync(string ZAINETNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/TestAuthentication", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestAuthentication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/TestAuthentication", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestAuthenticationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/SendEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SendEmail(string strFromAddress, string strToAddress, string strSubject, string strBodyText, long lngSystemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/SendEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SendEmailAsync(string strFromAddress, string strToAddress, string strSubject, string strBodyText, long lngSystemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/AddTabletTrade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddTabletTrade(
                    int TradeID, 
                    string sTrader, 
                    string sCreatedBy, 
                    System.DateTime TradeDate, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    double Volume, 
                    double Price, 
                    char BuyOrSell, 
                    string CounterParty, 
                    string CounterpartyTrader, 
                    string Shape, 
                    string BespokeShape, 
                    System.DateTime BespokeStartDate, 
                    System.DateTime BespokeEndDate, 
                    char cBroker, 
                    bool bBiLateral, 
                    System.DateTime BiLateralTime, 
                    string BiLateralExtension, 
                    bool bZeroBrokerage, 
                    string ZAINETnum, 
                    bool bTStamp, 
                    string Comments, 
                    int BackOfficeID, 
                    string BackOfficeComments, 
                    char cBuyReason, 
                    bool blIncludeWeekends, 
                    bool vTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/AddTabletTrade", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddTabletTradeAsync(
                    int TradeID, 
                    string sTrader, 
                    string sCreatedBy, 
                    System.DateTime TradeDate, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    double Volume, 
                    double Price, 
                    char BuyOrSell, 
                    string CounterParty, 
                    string CounterpartyTrader, 
                    string Shape, 
                    string BespokeShape, 
                    System.DateTime BespokeStartDate, 
                    System.DateTime BespokeEndDate, 
                    char cBroker, 
                    bool bBiLateral, 
                    System.DateTime BiLateralTime, 
                    string BiLateralExtension, 
                    bool bZeroBrokerage, 
                    string ZAINETnum, 
                    bool bTStamp, 
                    string Comments, 
                    int BackOfficeID, 
                    string BackOfficeComments, 
                    char cBuyReason, 
                    bool blIncludeWeekends, 
                    bool vTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/AddMultiDayShapeTrade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddMultiDayShapeTrade(
                    int TradeID, 
                    string sTrader, 
                    string sCreatedBy, 
                    System.DateTime TradeDate, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    double Volume, 
                    double Price, 
                    char BuyOrSell, 
                    string CounterParty, 
                    string CounterpartyTrader, 
                    string Shape, 
                    string[] BespokeShape, 
                    System.DateTime BespokeStartDate, 
                    System.DateTime BespokeEndDate, 
                    char cBroker, 
                    bool bBiLateral, 
                    System.DateTime BiLateralTime, 
                    string BiLateralExtension, 
                    bool bZeroBrokerage, 
                    string ZAINETnum, 
                    bool bTStamp, 
                    string Comments, 
                    int BackOfficeID, 
                    string BackOfficeComments, 
                    char cBuyReason, 
                    bool blIncludeWeekends, 
                    bool vTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/AddMultiDayShapeTrade", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddMultiDayShapeTradeAsync(
                    int TradeID, 
                    string sTrader, 
                    string sCreatedBy, 
                    System.DateTime TradeDate, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    double Volume, 
                    double Price, 
                    char BuyOrSell, 
                    string CounterParty, 
                    string CounterpartyTrader, 
                    string Shape, 
                    string[] BespokeShape, 
                    System.DateTime BespokeStartDate, 
                    System.DateTime BespokeEndDate, 
                    char cBroker, 
                    bool bBiLateral, 
                    System.DateTime BiLateralTime, 
                    string BiLateralExtension, 
                    bool bZeroBrokerage, 
                    string ZAINETnum, 
                    bool bTStamp, 
                    string Comments, 
                    int BackOfficeID, 
                    string BackOfficeComments, 
                    char cBuyReason, 
                    bool blIncludeWeekends, 
                    bool vTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/DeleteTableTrade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteTableTrade(int TradeID, bool vTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/DeleteTableTrade", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteTableTradeAsync(int TradeID, bool vTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/DeleteETradeForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteETradeForm(string List, string Title, bool vTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/DeleteETradeForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteETradeFormAsync(string List, string Title, bool vTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetUserType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetUserType(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetUserType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserTypeAsync(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetEmailAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetEmailAddress(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetEmailAddress", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetEmailAddressAsync(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetShapes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetShapes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetShapes", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetShapesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/TradeExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TradeExist(string v_ZainetTnum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/TradeExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> TradeExistAsync(string v_ZainetTnum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/LookUpShape", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LookUpShape(string Shortcut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/LookUpShape", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LookUpShapeAsync(string Shortcut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetCounterparties", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetCounterparties();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/GetCounterparties", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetCounterpartiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/LookUpCounterparty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebServices.eTradeGatewayService.udtCounterparty LookUpCounterparty(string Shortcut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/LookUpCounterparty", ReplyAction="*")]
        System.Threading.Tasks.Task<WebServices.eTradeGatewayService.udtCounterparty> LookUpCounterpartyAsync(string Shortcut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/LookUpZainetCounterparty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebServices.eTradeGatewayService.udtCounterparty LookUpZainetCounterparty(string Shortcut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/LookUpZainetCounterparty", ReplyAction="*")]
        System.Threading.Tasks.Task<WebServices.eTradeGatewayService.udtCounterparty> LookUpZainetCounterpartyAsync(string Shortcut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/LookUpCounterpartyTrader", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LookUpCounterpartyTrader(string TradeType, string Counterparty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/LookUpCounterpartyTrader", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LookUpCounterpartyTraderAsync(string TradeType, string Counterparty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/UpdateCounterpartyLookup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateCounterpartyLookup(string TradeType, string Counterparty, string TraderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/UpdateCounterpartyLookup", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateCounterpartyLookupAsync(string TradeType, string Counterparty, string TraderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/AddAuditLogEntry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddAuditLogEntry(string User, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/AddAuditLogEntry", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddAuditLogEntryAsync(string User, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/NotifierAccounts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] NotifierAccounts(string vCPTY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/NotifierAccounts", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> NotifierAccountsAsync(string vCPTY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/DefaultNotifier", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DefaultNotifier(string vCPTY, string vAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://drax.power/DefaultNotifier", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DefaultNotifierAsync(string vCPTY, string vAccount);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://drax.power/")]
    public partial class udtTabletTradeDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string tNumField;
        
        private string originalTNumField;
        
        private string counterpartyField;
        
        private string counterpartyIDField;
        
        private string brokerField;
        
        private char brokerIDField;
        
        private double brokarageField;
        
        private string traderField;
        
        private string executeTraderField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private int startTimeField;
        
        private int endTimeField;
        
        private string blockNameField;
        
        private double volumeField;
        
        private double priceField;
        
        private char buySellField;
        
        private System.DateTime tradeDateField;
        
        private bool dStampField;
        
        private bool tStampField;
        
        private char defaultDirectionField;
        
        private bool activeField;
        
        private double volumeMWhField;
        
        private char buyReasonField;
        
        private int daysField;
        
        private double[] periodVolumeField;
        
        private bool bespokeField;
        
        private int xKeyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string TNum {
            get {
                return this.tNumField;
            }
            set {
                this.tNumField = value;
                this.RaisePropertyChanged("TNum");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string OriginalTNum {
            get {
                return this.originalTNumField;
            }
            set {
                this.originalTNumField = value;
                this.RaisePropertyChanged("OriginalTNum");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Counterparty {
            get {
                return this.counterpartyField;
            }
            set {
                this.counterpartyField = value;
                this.RaisePropertyChanged("Counterparty");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string CounterpartyID {
            get {
                return this.counterpartyIDField;
            }
            set {
                this.counterpartyIDField = value;
                this.RaisePropertyChanged("CounterpartyID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Broker {
            get {
                return this.brokerField;
            }
            set {
                this.brokerField = value;
                this.RaisePropertyChanged("Broker");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public char BrokerID {
            get {
                return this.brokerIDField;
            }
            set {
                this.brokerIDField = value;
                this.RaisePropertyChanged("BrokerID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public double Brokarage {
            get {
                return this.brokarageField;
            }
            set {
                this.brokarageField = value;
                this.RaisePropertyChanged("Brokarage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Trader {
            get {
                return this.traderField;
            }
            set {
                this.traderField = value;
                this.RaisePropertyChanged("Trader");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string ExecuteTrader {
            get {
                return this.executeTraderField;
            }
            set {
                this.executeTraderField = value;
                this.RaisePropertyChanged("ExecuteTrader");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
                this.RaisePropertyChanged("StartDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
                this.RaisePropertyChanged("EndDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public int StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public int EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string BlockName {
            get {
                return this.blockNameField;
            }
            set {
                this.blockNameField = value;
                this.RaisePropertyChanged("BlockName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public double Volume {
            get {
                return this.volumeField;
            }
            set {
                this.volumeField = value;
                this.RaisePropertyChanged("Volume");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public double Price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
                this.RaisePropertyChanged("Price");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public char BuySell {
            get {
                return this.buySellField;
            }
            set {
                this.buySellField = value;
                this.RaisePropertyChanged("BuySell");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public System.DateTime TradeDate {
            get {
                return this.tradeDateField;
            }
            set {
                this.tradeDateField = value;
                this.RaisePropertyChanged("TradeDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public bool DStamp {
            get {
                return this.dStampField;
            }
            set {
                this.dStampField = value;
                this.RaisePropertyChanged("DStamp");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public bool TStamp {
            get {
                return this.tStampField;
            }
            set {
                this.tStampField = value;
                this.RaisePropertyChanged("TStamp");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public char DefaultDirection {
            get {
                return this.defaultDirectionField;
            }
            set {
                this.defaultDirectionField = value;
                this.RaisePropertyChanged("DefaultDirection");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public bool Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
                this.RaisePropertyChanged("Active");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=22)]
        public double VolumeMWh {
            get {
                return this.volumeMWhField;
            }
            set {
                this.volumeMWhField = value;
                this.RaisePropertyChanged("VolumeMWh");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=23)]
        public char BuyReason {
            get {
                return this.buyReasonField;
            }
            set {
                this.buyReasonField = value;
                this.RaisePropertyChanged("BuyReason");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=24)]
        public int Days {
            get {
                return this.daysField;
            }
            set {
                this.daysField = value;
                this.RaisePropertyChanged("Days");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=25)]
        public double[] PeriodVolume {
            get {
                return this.periodVolumeField;
            }
            set {
                this.periodVolumeField = value;
                this.RaisePropertyChanged("PeriodVolume");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=26)]
        public bool Bespoke {
            get {
                return this.bespokeField;
            }
            set {
                this.bespokeField = value;
                this.RaisePropertyChanged("Bespoke");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=27)]
        public int XKey {
            get {
                return this.xKeyField;
            }
            set {
                this.xKeyField = value;
                this.RaisePropertyChanged("XKey");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://drax.power/")]
    public partial class udtCounterparty : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string zainetIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ZainetId {
            get {
                return this.zainetIdField;
            }
            set {
                this.zainetIdField = value;
                this.RaisePropertyChanged("ZainetId");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface eTradeGatewaySoapChannel : WebServices.eTradeGatewayService.eTradeGatewaySoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class eTradeGatewaySoapClient : System.ServiceModel.ClientBase<WebServices.eTradeGatewayService.eTradeGatewaySoap>, WebServices.eTradeGatewayService.eTradeGatewaySoap {
        
        public eTradeGatewaySoapClient() {
        }
        
        public eTradeGatewaySoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public eTradeGatewaySoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public eTradeGatewaySoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public eTradeGatewaySoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebServices.eTradeGatewayService.udtTabletTradeDetails GetZAINETData(string ZAINETNo) {
            return base.Channel.GetZAINETData(ZAINETNo);
        }
        
        public System.Threading.Tasks.Task<WebServices.eTradeGatewayService.udtTabletTradeDetails> GetZAINETDataAsync(string ZAINETNo) {
            return base.Channel.GetZAINETDataAsync(ZAINETNo);
        }
        
        public string TestAuthentication() {
            return base.Channel.TestAuthentication();
        }
        
        public System.Threading.Tasks.Task<string> TestAuthenticationAsync() {
            return base.Channel.TestAuthenticationAsync();
        }
        
        public bool SendEmail(string strFromAddress, string strToAddress, string strSubject, string strBodyText, long lngSystemID) {
            return base.Channel.SendEmail(strFromAddress, strToAddress, strSubject, strBodyText, lngSystemID);
        }
        
        public System.Threading.Tasks.Task<bool> SendEmailAsync(string strFromAddress, string strToAddress, string strSubject, string strBodyText, long lngSystemID) {
            return base.Channel.SendEmailAsync(strFromAddress, strToAddress, strSubject, strBodyText, lngSystemID);
        }
        
        public string AddTabletTrade(
                    int TradeID, 
                    string sTrader, 
                    string sCreatedBy, 
                    System.DateTime TradeDate, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    double Volume, 
                    double Price, 
                    char BuyOrSell, 
                    string CounterParty, 
                    string CounterpartyTrader, 
                    string Shape, 
                    string BespokeShape, 
                    System.DateTime BespokeStartDate, 
                    System.DateTime BespokeEndDate, 
                    char cBroker, 
                    bool bBiLateral, 
                    System.DateTime BiLateralTime, 
                    string BiLateralExtension, 
                    bool bZeroBrokerage, 
                    string ZAINETnum, 
                    bool bTStamp, 
                    string Comments, 
                    int BackOfficeID, 
                    string BackOfficeComments, 
                    char cBuyReason, 
                    bool blIncludeWeekends, 
                    bool vTest) {
            return base.Channel.AddTabletTrade(TradeID, sTrader, sCreatedBy, TradeDate, StartDate, EndDate, Volume, Price, BuyOrSell, CounterParty, CounterpartyTrader, Shape, BespokeShape, BespokeStartDate, BespokeEndDate, cBroker, bBiLateral, BiLateralTime, BiLateralExtension, bZeroBrokerage, ZAINETnum, bTStamp, Comments, BackOfficeID, BackOfficeComments, cBuyReason, blIncludeWeekends, vTest);
        }
        
        public System.Threading.Tasks.Task<string> AddTabletTradeAsync(
                    int TradeID, 
                    string sTrader, 
                    string sCreatedBy, 
                    System.DateTime TradeDate, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    double Volume, 
                    double Price, 
                    char BuyOrSell, 
                    string CounterParty, 
                    string CounterpartyTrader, 
                    string Shape, 
                    string BespokeShape, 
                    System.DateTime BespokeStartDate, 
                    System.DateTime BespokeEndDate, 
                    char cBroker, 
                    bool bBiLateral, 
                    System.DateTime BiLateralTime, 
                    string BiLateralExtension, 
                    bool bZeroBrokerage, 
                    string ZAINETnum, 
                    bool bTStamp, 
                    string Comments, 
                    int BackOfficeID, 
                    string BackOfficeComments, 
                    char cBuyReason, 
                    bool blIncludeWeekends, 
                    bool vTest) {
            return base.Channel.AddTabletTradeAsync(TradeID, sTrader, sCreatedBy, TradeDate, StartDate, EndDate, Volume, Price, BuyOrSell, CounterParty, CounterpartyTrader, Shape, BespokeShape, BespokeStartDate, BespokeEndDate, cBroker, bBiLateral, BiLateralTime, BiLateralExtension, bZeroBrokerage, ZAINETnum, bTStamp, Comments, BackOfficeID, BackOfficeComments, cBuyReason, blIncludeWeekends, vTest);
        }
        
        public string AddMultiDayShapeTrade(
                    int TradeID, 
                    string sTrader, 
                    string sCreatedBy, 
                    System.DateTime TradeDate, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    double Volume, 
                    double Price, 
                    char BuyOrSell, 
                    string CounterParty, 
                    string CounterpartyTrader, 
                    string Shape, 
                    string[] BespokeShape, 
                    System.DateTime BespokeStartDate, 
                    System.DateTime BespokeEndDate, 
                    char cBroker, 
                    bool bBiLateral, 
                    System.DateTime BiLateralTime, 
                    string BiLateralExtension, 
                    bool bZeroBrokerage, 
                    string ZAINETnum, 
                    bool bTStamp, 
                    string Comments, 
                    int BackOfficeID, 
                    string BackOfficeComments, 
                    char cBuyReason, 
                    bool blIncludeWeekends, 
                    bool vTest) {
            return base.Channel.AddMultiDayShapeTrade(TradeID, sTrader, sCreatedBy, TradeDate, StartDate, EndDate, Volume, Price, BuyOrSell, CounterParty, CounterpartyTrader, Shape, BespokeShape, BespokeStartDate, BespokeEndDate, cBroker, bBiLateral, BiLateralTime, BiLateralExtension, bZeroBrokerage, ZAINETnum, bTStamp, Comments, BackOfficeID, BackOfficeComments, cBuyReason, blIncludeWeekends, vTest);
        }
        
        public System.Threading.Tasks.Task<string> AddMultiDayShapeTradeAsync(
                    int TradeID, 
                    string sTrader, 
                    string sCreatedBy, 
                    System.DateTime TradeDate, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    double Volume, 
                    double Price, 
                    char BuyOrSell, 
                    string CounterParty, 
                    string CounterpartyTrader, 
                    string Shape, 
                    string[] BespokeShape, 
                    System.DateTime BespokeStartDate, 
                    System.DateTime BespokeEndDate, 
                    char cBroker, 
                    bool bBiLateral, 
                    System.DateTime BiLateralTime, 
                    string BiLateralExtension, 
                    bool bZeroBrokerage, 
                    string ZAINETnum, 
                    bool bTStamp, 
                    string Comments, 
                    int BackOfficeID, 
                    string BackOfficeComments, 
                    char cBuyReason, 
                    bool blIncludeWeekends, 
                    bool vTest) {
            return base.Channel.AddMultiDayShapeTradeAsync(TradeID, sTrader, sCreatedBy, TradeDate, StartDate, EndDate, Volume, Price, BuyOrSell, CounterParty, CounterpartyTrader, Shape, BespokeShape, BespokeStartDate, BespokeEndDate, cBroker, bBiLateral, BiLateralTime, BiLateralExtension, bZeroBrokerage, ZAINETnum, bTStamp, Comments, BackOfficeID, BackOfficeComments, cBuyReason, blIncludeWeekends, vTest);
        }
        
        public bool DeleteTableTrade(int TradeID, bool vTest) {
            return base.Channel.DeleteTableTrade(TradeID, vTest);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTableTradeAsync(int TradeID, bool vTest) {
            return base.Channel.DeleteTableTradeAsync(TradeID, vTest);
        }
        
        public string DeleteETradeForm(string List, string Title, bool vTest) {
            return base.Channel.DeleteETradeForm(List, Title, vTest);
        }
        
        public System.Threading.Tasks.Task<string> DeleteETradeFormAsync(string List, string Title, bool vTest) {
            return base.Channel.DeleteETradeFormAsync(List, Title, vTest);
        }
        
        public System.Data.DataSet GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public string GetUserType(string User) {
            return base.Channel.GetUserType(User);
        }
        
        public System.Threading.Tasks.Task<string> GetUserTypeAsync(string User) {
            return base.Channel.GetUserTypeAsync(User);
        }
        
        public string GetEmailAddress(string User) {
            return base.Channel.GetEmailAddress(User);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailAddressAsync(string User) {
            return base.Channel.GetEmailAddressAsync(User);
        }
        
        public string[] GetShapes() {
            return base.Channel.GetShapes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetShapesAsync() {
            return base.Channel.GetShapesAsync();
        }
        
        public bool TradeExist(string v_ZainetTnum) {
            return base.Channel.TradeExist(v_ZainetTnum);
        }
        
        public System.Threading.Tasks.Task<bool> TradeExistAsync(string v_ZainetTnum) {
            return base.Channel.TradeExistAsync(v_ZainetTnum);
        }
        
        public string LookUpShape(string Shortcut) {
            return base.Channel.LookUpShape(Shortcut);
        }
        
        public System.Threading.Tasks.Task<string> LookUpShapeAsync(string Shortcut) {
            return base.Channel.LookUpShapeAsync(Shortcut);
        }
        
        public string[] GetCounterparties() {
            return base.Channel.GetCounterparties();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCounterpartiesAsync() {
            return base.Channel.GetCounterpartiesAsync();
        }
        
        public WebServices.eTradeGatewayService.udtCounterparty LookUpCounterparty(string Shortcut) {
            return base.Channel.LookUpCounterparty(Shortcut);
        }
        
        public System.Threading.Tasks.Task<WebServices.eTradeGatewayService.udtCounterparty> LookUpCounterpartyAsync(string Shortcut) {
            return base.Channel.LookUpCounterpartyAsync(Shortcut);
        }
        
        public WebServices.eTradeGatewayService.udtCounterparty LookUpZainetCounterparty(string Shortcut) {
            return base.Channel.LookUpZainetCounterparty(Shortcut);
        }
        
        public System.Threading.Tasks.Task<WebServices.eTradeGatewayService.udtCounterparty> LookUpZainetCounterpartyAsync(string Shortcut) {
            return base.Channel.LookUpZainetCounterpartyAsync(Shortcut);
        }
        
        public string LookUpCounterpartyTrader(string TradeType, string Counterparty) {
            return base.Channel.LookUpCounterpartyTrader(TradeType, Counterparty);
        }
        
        public System.Threading.Tasks.Task<string> LookUpCounterpartyTraderAsync(string TradeType, string Counterparty) {
            return base.Channel.LookUpCounterpartyTraderAsync(TradeType, Counterparty);
        }
        
        public string UpdateCounterpartyLookup(string TradeType, string Counterparty, string TraderName) {
            return base.Channel.UpdateCounterpartyLookup(TradeType, Counterparty, TraderName);
        }
        
        public System.Threading.Tasks.Task<string> UpdateCounterpartyLookupAsync(string TradeType, string Counterparty, string TraderName) {
            return base.Channel.UpdateCounterpartyLookupAsync(TradeType, Counterparty, TraderName);
        }
        
        public bool AddAuditLogEntry(string User, string Action) {
            return base.Channel.AddAuditLogEntry(User, Action);
        }
        
        public System.Threading.Tasks.Task<bool> AddAuditLogEntryAsync(string User, string Action) {
            return base.Channel.AddAuditLogEntryAsync(User, Action);
        }
        
        public string[] NotifierAccounts(string vCPTY) {
            return base.Channel.NotifierAccounts(vCPTY);
        }
        
        public System.Threading.Tasks.Task<string[]> NotifierAccountsAsync(string vCPTY) {
            return base.Channel.NotifierAccountsAsync(vCPTY);
        }
        
        public string DefaultNotifier(string vCPTY, string vAccount) {
            return base.Channel.DefaultNotifier(vCPTY, vAccount);
        }
        
        public System.Threading.Tasks.Task<string> DefaultNotifierAsync(string vCPTY, string vAccount) {
            return base.Channel.DefaultNotifierAsync(vCPTY, vAccount);
        }
    }
}
